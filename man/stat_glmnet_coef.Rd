% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_statistics.R
\name{stat_glmnet_coef}
\alias{stat_glmnet_coef}
\title{Generating multiple knockoff statistics using coefficient estimate from glmnet}
\usage{
stat_glmnet_coef(
  X,
  X_k,
  y,
  omega,
  family = "gaussian",
  nlam = 500,
  lam_min_ratio = 5e-04
)
}
\arguments{
\item{X}{A \code{n}-by-\code{p} matrix of original variables}

\item{X_k}{A \code{n}-by-\code{d} matrix of multiple knockoff variables}

\item{y}{A \code{n} vector of response}

\item{omega}{A \code{p} vector indicating the weights for each variable. For now, we require each entry to be an integer greater than or equal to 2.}

\item{family}{The conditional distribution of y given X. See the family option for \code{glmnet}.}

\item{nlam}{Number of tuning parameter lambda used in fitting the lasso. Default to be 500.}

\item{lam_min_ratio}{The ratio of the minimum and the maximum value of lambda in constructing the tuning parameters. Default to be \code{1e-4}.}
}
\value{
An list of three components:
\describe{
\item{\code{kappa}}{the vector of indices of winner for each variable competing with its multiple knockoff counterparts. \code{kappa[j] = 1} indicates that the original variable is beating all of its knockoff counterparts, and \code{kappa[j]} not equal to 1 means otherwise.}
\item{\code{tau}}{a vector of scores determining the order for which we consider to include variables into the model.}
\item{\code{score_total}}{the matrix containing the original `glmnet` coefficient estimates for each variable and its knockoff counterparts. For example, \code{score_total[1:omega[j], j]} is the coefficients estimates for the j-th variables and its \code{omega_j} - 1 knockoff counterparts.}
}
}
\description{
This function computes the knockoff statistics based on the absolute value of the coefficient estimate from glmnet.
}
\examples{
library(cheapknockoff)
set.seed(123)
n <- 100
p <- 30
x <- matrix(data = rnorm(n * p), nrow = n, ncol = p)
y <- x[, 1] - 2 * x[, 2] + rnorm(n)
omega <- c(2, 9, sample(seq(2, 9), size = 28, replace = TRUE))
# construct multiple knockoffs
X_k <- multiple_knockoff_Gaussian(X = x, mu = rep(0, p), Sigma = diag(1, p), omega = omega)
# compute knockoff statistics
stat <- cheapknockoff::stat_glmnet_coef(X = x, X_k = X_k, y = y, omega = omega)
}
